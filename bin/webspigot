#!/usr/bin/env ruby
require 'optparse'
require 'webspigot'

@logger = WsLogger.new

@options = {
  safe_mode: "STRICT",
  blur_previous: false,
  blur_amount: '0x6',
  monochrome_previous: false,
  search_phrases: [],
  max_retries: 5,
  outfile: '/tmp/composite.png',
  urlfile: nil,
  height: 1080,
  width: 1920,
  delay_between_images: 30,
  max_recent_urls: 200,
  cache_period: 600,
  cache_timeout: 60
}

@optparser = OptionParser.new do |o|
  o.banner = "Usage: webspigot [options]"
  o.separator ""
  o.separator "WebSpigot fetches random images based on Google News searches."
  o.separator ""

  o.on('-h', '--help', 'Display this message') { puts o; exit }

  o.on('--size 1920x1080', 'The size of the output image') do |size|
    w, h = size.split('x')
    @options[:height] = h.to_i
    @options[:width] = w.to_i
  end

  o.on('--delay SECONDS', 'Delay between images in seconds') do |delay|
    @options[:delay_between_images] = delay.to_i
  end

  o.on('--blur-amount AMOUNT', 'When using --blur-previous, the amount of blurring to do') do |amount|
    @options[:blur_amount] = amount
  end

  o.on('--blur-previous', 'Blur the previous images each time a new image is displayed') do |blur|
    @options[:blur_previous] = true
  end

  o.on('--cache-period SECONDS', 'How long to cache the news results') do |secs|
    @options[:cache_period] = secs
  end

  o.on('--cache-timeout SECONDS', 'How long to wait for news results') do |secs|
    @options[:cache_timeout] = secs
  end

  o.on('--max-recent-urls URLS', 'The number of recent URLS to use for preventing dupes') do |recents|
    @options[:max_recent_urls] = rececnts
  end

  o.on('--max-retries RETRIES', 'The number of times to retry getting an image') do |retries|
    @options[:max_retries] = retries.to_i
  end

  o.on('--monochrome-previous', 'Convert the previous images to monochrome each time a new image is displayed') do |mono|
    @options[:monochrome_previous] = true
  end

  o.on('--outfile OUTFILE', 'The filename for the composite image') do |outfile|
    @options[:outfile] = outfile
  end

  o.on('--safe-mode MODE', 'Set safe mode to MODE (OFF, DEMOTE, STRICT)') do |mode|
    @options[:safe_mode] = mode
  end

  o.on('--urlfile URLFILE', 'The filename to log URLs to') do |urlfile|
    @options[:urlfile] = urlfile
  end

  o.parse!
end

def usage
  puts @optparser
  exit
end

def get_loc(w, h, sizew, sizeh)
  x = [(w * rand).to_i - sizew, 0].max
  y = [(h * rand).to_i - sizeh, 0].max
  [x, y]
end

def cleanup(image_path)
  Dir.glob("#{image_path}*").each { |f| File.delete(f) }
end

def valid_image(w, h)
  if w <= 100 || h <= 100
    return false
  end
  true
end

unless ARGV[0].nil?
  @options[:search_phrases] = ARGV[0].split(';')
end

ws = Webspigot.new(@options)
while true
  start = Time.now
  ws.run
  image_path = ws.save
  unless image_path.nil? || image_path.empty?
    begin
      h = @options[:height]
      w = @options[:width]

      size = `identify -format '%[fx:w]x%[fx:h]' #{image_path}`.chomp
      @logger.debug("image size: #{size}")
      sizew, sizeh = size.split('x').map { |s| s.to_i }

      unless valid_image(sizew, sizeh)
        @logger.debug("image is too small [#{size}], skipping it")
        cleanup(image_path)
        next
      end

      loc = get_loc(w, h, sizew, sizeh)

      unless image_path.end_with?('.png')
        `convert #{image_path} #{image_path}.png`
        `rm #{image_path}`
        image_path = "#{image_path}.png"
      end

      # monochrome the composite
      if @options[:monochrome_previous]
        `convert #{@options[:outfile]} -monochrome #{@options[:outfile]}`
      end

      # blur the composite
      if @options[:blur_previous]
        `convert #{@options[:outfile]} -blur #{@options[:blur_amount]} #{@options[:outfile]}`
      end

      # blur edges of current image
      cmd = "convert #{image_path} -alpha set -virtual-pixel transparent -channel A " \
        "-blur #{@options[:blur_amount]} -level 50%,100% +channel #{image_path}"
      `#{cmd}`

      # compose composite and current image
      cmd = "convert -background black -page #{w}x#{h} #{@options[:outfile]} " \
        "-page +#{loc[0]}+#{loc[1]} #{image_path} -flatten #{@options[:outfile]}"
      `#{cmd}`

      # add the search phrase
      diff = '%.2f' % (Time.now - start)
      pad = " " * 5
      phrase = "#{pad}#{ws.search_phrase}#{pad}"
      cmd = "convert #{@options[:outfile]} -pointsize 15 -fill '#000' " \
        "-draw 'rectangle 0,#{h - 20},#{w},#{w}' -gravity south " \
        "-stroke '#777C' -strokewidth 2 -annotate 0 \"#{phrase}\" " \
        "-stroke none -fill white -annotate 0 \"#{phrase}\" " \
        "#{@options[:outfile]}"
      `#{cmd}`

      #`feh --bg-fill #{@options[:outfile]}`

      cleanup(image_path)
    rescue => e
      @logger.error("#{caller_locations(1,1)[0]} #{e}")
    end
    sleep @options[:delay_between_images]
  end
end
